<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checklist Vehículos Blindados</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #e74c3c;
            --accent-color: #3498db;
            --light-color: #ecf0f1;
            --dark-color: #34495e;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f5f5f5;
            color: #333;
        }
        
        .header {
            background: linear-gradient(135deg, var(--primary-color), var(--dark-color));
            color: white;
            padding: 25px 0;
            border-radius: 5px;
            margin-bottom: 25px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .header h1 {
            font-weight: 700;
            letter-spacing: 1px;
        }
        
        .header h2 {
            font-weight: 300;
            letter-spacing: 0.5px;
        }
        
        .card {
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            border: none;
            margin-bottom: 25px;
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card-header {
            background: linear-gradient(135deg, var(--accent-color), var(--primary-color));
            color: white;
            font-weight: 600;
            padding: 15px 20px;
            border-bottom: none;
        }
        
        .btn-zone {
            margin: 5px;
            min-width: 100px;
            padding: 8px 15px;
            border-radius: 20px;
            font-weight: 500;
            transition: all 0.3s ease;
        }
        
        .btn-zone:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .activity-item {
            margin-bottom: 15px;
            padding: 15px;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            background-color: white;
            transition: all 0.3s ease;
        }
        
        .activity-item:hover {
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }
        
        .activity-text {
            font-weight: 500;
            margin-bottom: 10px;
            color: var(--dark-color);
        }
        
        .option-btn {
            min-width: 70px;
            margin: 3px;
            border-radius: 15px;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        
        .option-btn.active {
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        
        .notes-input {
            margin-top: 10px;
            width: 100%;
            border-radius: 8px;
            border: 1px solid #ced4da;
            padding: 10px;
        }
        
        .table-responsive {
            margin-top: 20px;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        }
        
        .table th {
            background-color: var(--primary-color);
            color: white;
            font-weight: 500;
        }
        
        .btn-save-gsheet {
            background-color: #0f9d58;
            color: white;
            font-weight: 500;
        }
        
        .btn-save-gsheet:hover {
            background-color: #0b8043;
            color: white;
        }
        
        .print-section {
            display: none;
        }
        
        @media print {
            body * {
                visibility: hidden;
            }
            .print-section, .print-section * {
                visibility: visible;
            }
            .print-section {
                position: absolute;
                left: 0;
                top: 0;
                width: 100%;
            }
            .no-print {
                display: none !important;
            }
        }
        
        .report-header {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid var(--primary-color);
        }
        
        .vehicle-info {
            margin-bottom: 30px;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .section-title {
            background-color: var(--light-color);
            padding: 10px 15px;
            margin-top: 25px;
            margin-bottom: 15px;
            font-weight: 600;
            color: var(--primary-color);
            border-left: 4px solid var(--accent-color);
            border-radius: 4px;
        }
        
        .report-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 25px;
            background-color: white;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }
        
        .report-table th {
            background-color: var(--primary-color);
            color: white;
            padding: 12px;
            text-align: left;
        }
        
        .report-table td {
            padding: 10px 12px;
            border-bottom: 1px solid #eee;
        }
        
        .report-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        .signature-area {
            margin-top: 60px;
            border-top: 1px solid #000;
            width: 300px;
            text-align: center;
            padding-top: 15px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .total-score {
            font-weight: bold;
            font-size: 1.2em;
            margin-top: 25px;
            padding: 10px;
            background-color: var(--light-color);
            border-radius: 5px;
            text-align: center;
            color: var(--primary-color);
        }
        
        .logo-container {
            text-align: center;
            margin-bottom: 20px;
        }
        
        .logo-placeholder {
            width: 150px;
            height: 80px;
            background-color: #ddd;
            margin: 0 auto;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 5px;
            color: #777;
            font-weight: bold;
        }
        
        .form-control, .form-select {
            border-radius: 5px;
            padding: 10px;
            border: 1px solid #ced4da;
        }
        
        .form-control:focus, .form-select:focus {
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.25rem rgba(52, 152, 219, 0.25);
        }
    </style>
</head>
<body>
    <div class="container-fluid no-print">
        <div class="header text-center">
            <div class="logo-container">
                <div class="logo-placeholder">LOGO EMPRESA</div>
            </div>
            <h1>CHECKLIST DE ENTREGA FINAL</h1>
            <h2>Vehículo Blindado</h2>
        </div>

        <!-- Sección de Cabecera -->
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-car me-2"></i> Datos del Vehículo</h3>
            </div>
            <div class="card-body">
                <form id="header-form">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label for="tower" class="form-label">Torre asignada</label>
                            <input type="text" class="form-control" id="tower" required>
                        </div>
                        <div class="col-md-3">
                            <label for="date" class="form-label">Fecha de revisión</label>
                            <input type="date" class="form-control" id="date" required>
                        </div>
                        <div class="col-md-3">
                            <label for="inspection-number" class="form-label">Número de revisión</label>
                            <select class="form-select" id="inspection-number" required>
                                <option value="">Seleccionar...</option>
                                <option value="1ª">1ª</option>
                                <option value="2ª">2ª</option>
                                <option value="3ª">3ª</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="employee" class="form-label">Número de empleado</label>
                            <input type="text" class="form-control" id="employee" required>
                        </div>
                        <div class="col-md-3">
                            <label for="brand" class="form-label">Marca</label>
                            <input type="text" class="form-control" id="brand" required>
                        </div>
                        <div class="col-md-3">
                            <label for="type" class="form-label">Tipo</label>
                            <input type="text" class="form-control" id="type" required>
                        </div>
                        <div class="col-md-3">
                            <label for="level" class="form-label">Nivel</label>
                            <input type="text" class="form-control" id="level" required>
                        </div>
                        <div class="col-md-3">
                            <label for="serial" class="form-label">Serie</label>
                            <input type="text" class="form-control" id="serial" required>
                        </div>
                        <div class="col-md-3">
                            <label for="color" class="form-label">Color</label>
                            <input type="text" class="form-control" id="color" required>
                        </div>
                    </div>
                </form>
            </div>
        </div>

        <!-- Selección de Zona -->
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-map-marked-alt me-2"></i> Selección de Zona a Revisar</h3>
            </div>
            <div class="card-body">
                <div class="d-flex flex-wrap">
                    <button type="button" class="btn btn-outline-primary btn-zone" data-zone="1">Zona 1</button>
                    <button type="button" class="btn btn-outline-primary btn-zone" data-zone="2">Zona 2</button>
                    <button type="button" class="btn btn-outline-primary btn-zone" data-zone="3">Zona 3</button>
                    <button type="button" class="btn btn-outline-primary btn-zone" data-zone="4">Zona 4</button>
                    <button type="button" class="btn btn-outline-primary btn-zone" data-zone="5">Zona 5</button>
                </div>
            </div>
        </div>

        <!-- Checklist -->
        <div class="card" id="checklist-container" style="display: none;">
            <div class="card-header">
                <h3><i class="fas fa-clipboard-check me-2"></i> Checklist - Zona <span id="current-zone"></span></h3>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="subzone" class="form-label">Subzona:</label>
                    <select class="form-select" id="subzone">
                        <option value="">Seleccionar subzona...</option>
                        <option value="EXTERIORES">EXTERIORES</option>
                        <option value="INTERIORES">INTERIORES</option>
                        <option value="FUNCIONAMIENTO ELÉCTRICO">FUNCIONAMIENTO ELÉCTRICO</option>
                        <option value="PRUEBA DE CARRETERA">PRUEBA DE CARRETERA</option>
                        <option value="PRUEBA DE AGUA">PRUEBA DE AGUA</option>
                        <option value="INTERIORES CIELO">INTERIORES CIELO</option>
                    </select>
                </div>
                
                <div id="activities-container"></div>
                
                <div class="mt-3 d-flex justify-content-between flex-wrap">
                    <button id="save-checklist" class="btn btn-success mb-2">
                        <i class="fas fa-save"></i> Guardar Checklist
                    </button>
                    <button id="save-gsheet" class="btn btn-save-gsheet mb-2">
                        <i class="fab fa-google-drive"></i> Guardar en Google Sheets
                    </button>
                    <button id="clear-form" class="btn btn-warning mb-2">
                        <i class="fas fa-broom"></i> Limpiar Formulario
                    </button>
                </div>
            </div>
        </div>

        <!-- Revisiones Registradas -->
        <div class="card">
            <div class="card-header">
                <h3><i class="fas fa-history me-2"></i> Revisiones Registradas</h3>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover" id="inspections-table">
                        <thead>
                            <tr>
                                <th>Torre</th>
                                <th>Fecha</th>
                                <th>Revisión</th>
                                <th>Empleado</th>
                                <th>Marca</th>
                                <th>Serie</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="inspections-body">
                            <!-- Datos se cargarán dinámicamente -->
                        </tbody>
                    </table>
                </div>
                
                <div class="d-flex justify-content-end mt-3 flex-wrap">
                    <button id="export-excel" class="btn btn-success me-2 mb-2">
                        <i class="fas fa-file-excel"></i> Exportar a Excel
                    </button>
                    <button id="print-report" class="btn btn-primary mb-2">
                        <i class="fas fa-print"></i> Imprimir Reporte
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Sección para Imprimir -->
    <div class="print-section" id="print-section"></div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
        // Datos de las actividades por subzona
        const activitiesBySubzone = {
            "EXTERIORES": [
                "Líneas de carácter en línea",
                "Puerta correctamente cuadrada y enrasada",
                "La puerta abre y cierra correctamente (Cierre al primer paso)",
                "Loderas correctamente instaladas",
                "El rin se encuentra limpio y libre de daños",
                "Revisar que la llanta no tenga daños ni objetos incrustados",
                "Anota la marca de la llanta:",
                "Salpicadera y cantonera sin daños (pasar la llema de los dedos en los filos)",
                "Poste \"A\" sin daños",
                "Parabrisas limpio y libre de daños",
                "Detalles de sika, franjeado y gomas PB bien colocados",
                "Marco de puerta correctamente alineado vs carrocería",
                "Cañuela y botaguas bien colocadas y sin daños",
                "Espejo retrovisor bien colocado sin daños",
                "Gomas exteriores de ventana en buen estado",
                "Molduras negras limpias, correctamente colocadas y sin daños (incluye moldura de puerta parte baja)",
                "Manijas externa / interna sin daño y funciona correctamente"
            ],
            "INTERIORES": [
                "Tablero correctamente instalado",
                "El tablero se encuentra limpio y sin ningún daño",
                "Baquela Izq. pared de fuego correctamente instalada",
                "Baquela Izq. poste A correctamente instalada y sin daños",
                "Asiento Izq. libre de marcas o rayas",
                "Cinturón de seguridad Izq. en buen estado y funciona correctamente",
                "Consola palanca de velocidades sin daños",
                "Rebajos (estribo) Izq. correctamente instalado y sin daños",
                "Espejo retrovisor central bien instalado y sin daño",
                "Tapa de sensor de lluvia bien colocada",
                "Visera Izq. bien colocada y limpia",
                "Alfombra piso limpia y sin daños"
            ],
            "FUNCIONAMIENTO ELÉCTRICO": [
                "El vehículo enciende adecuadamente",
                "El elevador Izq. funciona bien",
                "Encienden todas las luces interiores incluyendo 5ta puerta / guantera / bajo tablero / consola central",
                "Sin testigos en el tablero",
                "Funciona el A/C (velocidades)",
                "Funciona el Sistema de sonido, USB y Tomacorrientes",
                "Funcionan los limpiadores y chisgueteros (parabrisas / medallón)",
                "Funciona Asiento Del. Izq.",
                "Funcionan los seguros eléctricos",
                "Sensor de lluvia",
                "Enciende luz interior al abrir la puerta? (correr prueba 4 puertas)",
                "Funcionan sensores de presencia (facia delantera/trasera)",
                "Funcionan correctamente los GADGETs del volante?"
            ],
            "PRUEBA DE CARRETERA": [
                "Vehículo libre de ruidos por basura y/o objetos extraños",
                "Vehículo libre de ruidos por colocación de baquela, tapas, etc.",
                "El vehículo no presenta ruidos por entradas de aire",
                "Estabilidad y respuesta del vehículo",
                "Funciona velocímetro y odómetro",
                "Correcto desempeño en la suspensión?"
            ],
            "PRUEBA DE AGUA": [
                "Se encuentra libre de filtraciones de agua en puerta delantera Izq.",
                "Se encuentra libre de filtraciones de agua en parabrisas",
                "Se encuentra libre de filtraciones de agua en quemacocos"
            ],
            "INTERIORES CIELO": [
                "Se encuentra libre de filtraciones de agua en puerta delantera Izq.",
                "Se encuentra libre de filtraciones de agua en parabrisas",
                "Se encuentra libre de filtraciones de agua en quemacocos"
            ]
        };

        // Opciones para cada item del checklist
        const checklistOptions = [
            { text: "L1", value: 10 },
            { text: "L2", value: 20 },
            { text: "R1", value: 10 },
            { text: "R2", value: 20 },
            { text: "P1", value: 10 },
            { text: "P2", value: 20 },
            { text: "OK", value: 0 }
        ];

        // Almacenamiento de revisiones
        let inspections = JSON.parse(localStorage.getItem('vehicleInspections')) || [];
        let currentInspection = null;

        // Elementos del DOM
        const headerForm = document.getElementById('header-form');
        const zoneBtns = document.querySelectorAll('.btn-zone');
        const checklistContainer = document.getElementById('checklist-container');
        const currentZoneSpan = document.getElementById('current-zone');
        const subzoneSelect = document.getElementById('subzone');
        const activitiesContainer = document.getElementById('activities-container');
        const saveChecklistBtn = document.getElementById('save-checklist');
        const saveGsheetBtn = document.getElementById('save-gsheet');
        const clearFormBtn = document.getElementById('clear-form');
        const exportExcelBtn = document.getElementById('export-excel');
        const printReportBtn = document.getElementById('print-report');
        const inspectionsBody = document.getElementById('inspections-body');
        const printSection = document.getElementById('print-section');

        // Event Listeners
        document.addEventListener('DOMContentLoaded', () => {
            loadInspections();
            updateInspectionOptions();
        });

        zoneBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const zone = btn.dataset.zone;
                currentZoneSpan.textContent = zone;
                checklistContainer.style.display = 'block';
                activitiesContainer.innerHTML = '';
                subzoneSelect.value = '';
            });
        });

        subzoneSelect.addEventListener('change', (e) => {
            const subzone = e.target.value;
            if (subzone) {
                showActivities(subzone);
            }
        });

        saveChecklistBtn.addEventListener('click', saveChecklist);
        saveGsheetBtn.addEventListener('click', saveToGoogleSheets);
        clearFormBtn.addEventListener('click', clearForm);
        exportExcelBtn.addEventListener('click', exportToExcel);
        printReportBtn.addEventListener('click', printReport);
        document.getElementById('serial').addEventListener('change', updateInspectionOptions);

        // Funciones
        function loadInspections() {
            inspectionsBody.innerHTML = '';
            
            if (inspections.length === 0) {
                inspectionsBody.innerHTML = '<tr><td colspan="7" class="text-center">No hay revisiones registradas</td></tr>';
                return;
            }
            
            inspections.forEach((insp, index) => {
                const tr = document.createElement('tr');
                tr.innerHTML = `
                    <td>${insp.tower}</td>
                    <td>${insp.date}</td>
                    <td>${insp.inspectionNumber}</td>
                    <td>${insp.employee}</td>
                    <td>${insp.brand}</td>
                    <td>${insp.serial}</td>
                    <td>
                        <button class="btn btn-sm btn-info view-inspection" data-id="${index}">
                            <i class="fas fa-eye"></i> Ver
                        </button>
                        <button class="btn btn-sm btn-danger delete-inspection" data-id="${index}">
                            <i class="fas fa-trash"></i> Eliminar
                        </button>
                    </td>
                `;
                inspectionsBody.appendChild(tr);
            });
            
            // Agregar event listeners a los botones nuevos
            document.querySelectorAll('.view-inspection').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = e.currentTarget.dataset.id;
                    viewInspection(id);
                });
            });
            
            document.querySelectorAll('.delete-inspection').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const id = e.currentTarget.dataset.id;
                    deleteInspection(id);
                });
            });
        }

        function updateInspectionOptions() {
            const inspectionSelect = document.getElementById('inspection-number');
            const options = inspectionSelect.querySelectorAll('option');
            
            // Habilitar todas las opciones primero
            options.forEach(opt => {
                if (opt.value) {
                    opt.disabled = false;
                }
            });
            
            // Deshabilitar las revisiones ya existentes para este vehículo
            const serial = document.getElementById('serial').value;
            if (serial) {
                inspections.forEach(insp => {
                    if (insp.serial === serial) {
                        options.forEach(opt => {
                            if (opt.value === insp.inspectionNumber) {
                                opt.disabled = true;
                            }
                        });
                    }
                });
            }
        }

        function showActivities(subzone) {
            activitiesContainer.innerHTML = '';
            
            const activities = activitiesBySubzone[subzone];
            if (!activities) return;
            
            activities.forEach((activity, index) => {
                const activityDiv = document.createElement('div');
                activityDiv.className = 'activity-item';
                
                const activityText = document.createElement('div');
                activityText.className = 'activity-text';
                activityText.textContent = `${index + 1}. ${activity}`;
                
                const optionsDiv = document.createElement('div');
                optionsDiv.className = 'd-flex flex-wrap';
                
                checklistOptions.forEach(option => {
                    const btn = document.createElement('button');
                    btn.type = 'button';
                    btn.className = 'btn btn-outline-secondary option-btn';
                    btn.textContent = option.text;
                    btn.dataset.value = option.value;
                    btn.addEventListener('click', () => {
                        // Remover clase active de otros botones en este grupo
                        optionsDiv.querySelectorAll('.btn').forEach(b => {
                            b.classList.remove('active', 'btn-primary');
                            b.classList.add('btn-outline-secondary');
                        });
                        // Agregar clase active al botón seleccionado
                        btn.classList.remove('btn-outline-secondary');
                        btn.classList.add('active', 'btn-primary');
                    });
                    
                    optionsDiv.appendChild(btn);
                });
                
                // Agregar campo de notas si la actividad lo requiere
                if (activity.includes(":")) {
                    const notesInput = document.createElement('input');
                    notesInput.type = 'text';
                    notesInput.className = 'form-control notes-input mt-2';
                    notesInput.placeholder = 'Ingrese información adicional...';
                    activityDiv.appendChild(notesInput);
                }
                
                activityDiv.appendChild(activityText);
                activityDiv.appendChild(optionsDiv);
                activitiesContainer.appendChild(activityDiv);
            });
        }

        function saveChecklist() {
            // Validar cabecera
            if (!headerForm.checkValidity()) {
                headerForm.reportValidity();
                return;
            }
            
            const zone = currentZoneSpan.textContent;
            const subzone = subzoneSelect.value;
            
            if (!zone || !subzone) {
                alert('Por favor seleccione una zona y subzona');
                return;
            }
            
            // Recolectar datos de la cabecera
            const header = {
                tower: document.getElementById('tower').value,
                date: document.getElementById('date').value,
                inspectionNumber: document.getElementById('inspection-number').value,
                employee: document.getElementById('employee').value,
                brand: document.getElementById('brand').value,
                type: document.getElementById('type').value,
                level: document.getElementById('level').value,
                serial: document.getElementById('serial').value,
                color: document.getElementById('color').value
            };
            
            // Verificar si ya existe una revisión para este vehículo y número de revisión
            const existingInspection = inspections.find(insp => 
                insp.serial === header.serial && insp.inspectionNumber === header.inspectionNumber
            );
            
            if (existingInspection) {
                alert('Ya existe una revisión con este número para este vehículo');
                return;
            }
            
            // Recolectar datos del checklist
            const activityItems = activitiesContainer.querySelectorAll('.activity-item');
            const activities = [];
            
            activityItems.forEach((item, index) => {
                const text = item.querySelector('.activity-text').textContent.replace(`${index + 1}. `, '');
                const selectedOption = item.querySelector('.option-btn.active');
                const notesInput = item.querySelector('.notes-input');
                
                activities.push({
                    number: index + 1,
                    description: text,
                    result: selectedOption ? selectedOption.textContent : 'No evaluado',
                    value: selectedOption ? parseInt(selectedOption.dataset.value) : 0,
                    notes: notesInput ? notesInput.value : ''
                });
            });
            
            // Crear objeto de revisión
            const inspection = {
                ...header,
                zone,
                subzone,
                activities,
                registrationDate: new Date().toISOString()
            };
            
            // Agregar a la lista de revisiones
            inspections.push(inspection);
            localStorage.setItem('vehicleInspections', JSON.stringify(inspections));
            
            // Actualizar tabla
            loadInspections();
            updateInspectionOptions();
            
            // Mostrar mensaje de éxito
            alert('Checklist guardado correctamente');
            
            // Limpiar formulario para nueva entrada
            clearForm();
        }

        function saveToGoogleSheets() {
    // Validar que haya una inspección actual
    if (!currentInspection) {
        alert('Por favor, primero guarde el checklist localmente y luego seleccione una revisión para guardar en Google Sheets');
        return;
    }
    
    // Mostrar mensaje de confirmación
    if (!confirm('¿Está seguro de guardar esta revisión en Google Sheets?')) {
        return;
    }
    
    // URL de tu Google Apps Script (debes reemplazarla con la tuya)
    const scriptUrl = 'https://script.google.com/macros/s/AKfycby6qzf43GXjxan7gRgLjHCcgLCMl6KaPNpvT3TrSzEplEJRGwz26c4W1Yj03Iy4HQJg/exec';
    
    // Mostrar carga
    const originalText = saveGsheetBtn.innerHTML;
    saveGsheetBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Enviando...';
    saveGsheetBtn.disabled = true;
    
    // Enviar datos al Google Sheet
    fetch(scriptUrl, {
        method: 'POST',
        mode: 'no-cors',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(currentInspection)
    })
    .then(() => {
        alert('Datos enviados correctamente a Google Sheets');
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Error al enviar datos: ' + error.message);
    })
    .finally(() => {
        saveGsheetBtn.innerHTML = originalText;
        saveGsheetBtn.disabled = false;
    });
}

        function exportToExcel() {
            if (inspections.length === 0) {
                alert('No hay datos para exportar');
                return;
            }
            
            // Preparar datos para Excel
            const excelData = [];
            
            inspections.forEach(insp => {
                insp.activities.forEach(act => {
                    excelData.push({
                        'Torre': insp.tower,
                        'Fecha Revisión': insp.date,
                        'Número Revisión': insp.inspectionNumber,
                        'Empleado': insp.employee,
                        'Marca': insp.brand,
                        'Tipo': insp.type,
                        'Nivel': insp.level,
                        'Serie': insp.serial,
                        'Color': insp.color,
                        'Zona': insp.zone,
                        'Subzona': insp.subzone,
                        'Actividad Número': act.number,
                        'Actividad Descripción': act.description,
                        'Resultado': act.result,
                        'Valor': act.value,
                        'Notas': act.notes
                    });
                });
            });
            
            // Crear hoja de trabajo
            const ws = XLSX.utils.json_to_sheet(excelData);
            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Revisiones");
            
            // Exportar
            XLSX.writeFile(wb, "revisiones_vehiculos_blindados.xlsx");
        }

        function viewInspection(id) {
            currentInspection = inspections[id];
            alert('Revisión seleccionada para visualización. Ahora puede imprimir o guardar en Google Sheets.');
        }

        function deleteInspection(id) {
            if (confirm('¿Está seguro de eliminar esta revisión?')) {
                inspections.splice(id, 1);
                localStorage.setItem('vehicleInspections', JSON.stringify(inspections));
                loadInspections();
                updateInspectionOptions();
            }
        }

        function printReport() {
            if (!currentInspection) {
                alert('Seleccione una revisión para ver el reporte');
                return;
            }
            
            printSection.innerHTML = generateReportContent();
            window.print();
        }

        function generateReportContent() {
            const insp = currentInspection;
            
            // Calcular puntaje total
            const totalScore = insp.activities.reduce((sum, act) => sum + act.value, 0);
            
            let html = `
                <div class="report-header">
                    <div class="logo-container">
                        <div class="logo-placeholder">LOGO EMPRESA</div>
                    </div>
                    <h1>REPORTE DE REVISIÓN DE VEHÍCULO BLINDADO</h1>
                    <p>Fecha de generación: ${new Date().toLocaleDateString()}</p>
                </div>
                
                <div class="vehicle-info">
                    <h2>Datos del Vehículo</h2>
                    <table class="report-table">
                        <tr>
                            <th>Torre:</th>
                            <td>${insp.tower}</td>
                            <th>Fecha Revisión:</th>
                            <td>${insp.date}</td>
                        </tr>
                        <tr>
                            <th>Número Revisión:</th>
                            <td>${insp.inspectionNumber}</td>
                            <th>Empleado:</th>
                            <td>${insp.employee}</td>
                        </tr>
                        <tr>
                            <th>Marca:</th>
                            <td>${insp.brand}</td>
                            <th>Tipo:</th>
                            <td>${insp.type}</td>
                        </tr>
                        <tr>
                            <th>Nivel:</th>
                            <td>${insp.level}</td>
                            <th>Serie:</th>
                            <td>${insp.serial}</td>
                        </tr>
                        <tr>
                            <th>Color:</th>
                            <td>${insp.color}</td>
                            <th>Puntaje Total:</th>
                            <td>${totalScore}</td>
                        </tr>
                    </table>
                </div>
                
                <div class="section-title">Zona ${insp.zone} - ${insp.subzone}</div>
                <table class="report-table">
                    <thead>
                        <tr>
                            <th>No.</th>
                            <th>Actividad</th>
                            <th>Resultado</th>
                            <th>Puntaje</th>
                            <th>Notas</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            insp.activities.forEach(act => {
                html += `
                    <tr>
                        <td>${act.number}</td>
                        <td>${act.description}</td>
                        <td>${act.result}</td>
                        <td>${act.value}</td>
                        <td>${act.notes || '-'}</td>
                    </tr>
                `;
            });
            
            html += `
                    </tbody>
                </table>